#include <fcntl.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <unistd.h>
#include <stdarg.h>
#include <time.h>
#include <pthread.h>


//andrew assingment 2 :) adventure

int exitistingconnections(int *usedDoors) {

  int i;
  int count;
  count = 0;

  for(i = 0; i<7; ++i){
    count += usedDoors[i];
  }

  return count;
}

int *getAdjMatrix(int dim) {

  int* matrix = malloc(dim*dim*sizeof(int));
  int i;
  int j;

  for(i=0; i<dim; ++i) {
    for(j=0; j<dim; ++j) {

      matrix[i*dim +j] = 0;

    }
  }

  for(i = 0; i< dim; ++i) {

//    int usedDoors[7];

    int numConnections = 3 + rand()%(dim - 4);
    printf("The number of connections for room %i is %i\n", i, numConnections);
    int newRandNumber = rand()%(dim-1);
    while(numConnections > exitistingconnections(&matrix[i*dim])){
      //printf("Room %i has %i connections\n", i, exitistingconnections(&matrix[i*dim]));
      newRandNumber = rand()%(dim-1);
      //printf("Trying to connect with room %i\n", newRandNumber);
      if (newRandNumber != i && matrix[i*dim + newRandNumber] == 0) {
         //printf("The generated number corresponds to a room that was not connected to %i\n", i);
         matrix[i*dim + newRandNumber] = 1;
         matrix[newRandNumber*dim + i] = 1;
      }
         //usedDoors[newRandNumber] = 1;
    }

  }

  return matrix;

}

const char * room_names[] = {"Dungeon", "Palace", "office","skyroom","lavapit","closet","wallys"};

int getRoomIdx(char *roomName) {
    int i = 0;
    int roomFound;
    while (i < 7 && (roomFound = strcmp(roomName, room_names[i]))) {
        ++i;
    }
    if (roomFound)
        return -1;
    else
        return i;
}

pthread_mutex_t lock;
char *timeInformation;

volatile int timeConsumed = 0;
volatile int stopping = 0;
void * gettimethread(void *arg) {

    char timeBuff[100];
    const struct tm *mytm;

    time_t rawtime;
    time( &rawtime );

    while (!stopping) {

        while (timeConsumed == 0) {}
        mytm = localtime( &rawtime );
        int numCharWritten = strftime(timeBuff, 100, "%I:%M%p, %A, %B %d, %Y", mytm);

        int fd = creat("currentTime.txt", S_IRWXU);
        //int fd = open("currentTime.txt", O_RDONLY, S_IRWXU);
        if (fd < 0) perror("Couldn't create file in second thread");
        write(fd, timeBuff, numCharWritten);
        close(fd);

        pthread_mutex_lock(&lock);
        timeConsumed = 0;
        pthread_mutex_unlock(&lock);
    }
}



int main(int argc, char **argv) {
  srand(time(0));
  int program_process_id = getpid();



  char buff[10000];
  if (argc != 2) {

    printf("Missing directory name for the rooms game\n");
    exit(0);
  }
  char *directoryName = argv[1];
  int i;
  int j;
  int dim;

  int adjMatrix[7][7];

  for(i=0; i<dim; ++i) {
    for(j=0; j<dim; ++j) {

      adjMatrix[i][j] = 0;

    }
  }

  int room_types[7]; //0 for starting room, 1 for mid room and 2 for end room

  int current_room_idx = -1;
  int end_room_idx = -1;

  for (i = 0; i < 7; ++i) {
    sprintf(buff, "./%s/%s", directoryName, room_names[i]);
//    open(buff, O_RDONLY)
    FILE * fd = fopen(buff, "r");
    char *parsedLine;
    while (parsedLine = fgets(buff, 100, fd)) {
        if (parsedLine[0] == 'C') {
            int startingCharIdx = 14;
            char nameOfConnection[100];
            int nameOfConnectionIdx = 0;
            while (parsedLine[startingCharIdx] != '\n') {
                nameOfConnection[nameOfConnectionIdx] = parsedLine[startingCharIdx];
                nameOfConnectionIdx++;
                startingCharIdx++;
            }
            parsedLine[startingCharIdx] = '\0';
            nameOfConnection[nameOfConnectionIdx] = '\0';
            int roomIdx = getRoomIdx(nameOfConnection);
            if (roomIdx == -1) {
                printf("One of the connected room names is not correct_1\n");
            }
            adjMatrix[i][roomIdx] = 1;
            adjMatrix[roomIdx][i] = 1;
        }
        if (parsedLine[5] == 'T') {
            if (parsedLine[11] == 'S') {
                room_types[i] = 0;
                current_room_idx = i;
            }
            else if (parsedLine[11] == 'M')
                room_types[i] = 1;
            else {
                room_types[i] = 2;
                end_room_idx = i;
            }
        }
    }

  }

  //bool end_room_found[2] = {0,1}; //ask

  int end_room_found = 0; ///*****
  int created_tid;
  pthread_create(&created_tid, NULL, &gettimethread, NULL);
  int printConnectionsDetails = 1;

  while (! end_room_found) {
    //gettimethread();
    if (printConnectionsDetails) {
        printf("Current room idx is %i\n", current_room_idx);
        sprintf(buff, "CURRENT LOCATION: %s\nPOSSIBLE CONNECTIONS:", room_names[current_room_idx]);
        write(1, buff, strlen(buff));
        for (i = 0; i < 7; ++i) {
            if (adjMatrix[current_room_idx][i]) {
                sprintf(buff, "%s, ", room_names[i]);
                write(1, buff, strlen(buff));
            }
        }
    } else {
        printConnectionsDetails = 1;
    }
    write(1, "\nWHERE TO? >", strlen("\nWHERE TO? >"));
    fgets(buff, 1000, stdin);
    int inputIdx = 0;
    while (buff[inputIdx] != '\n') { inputIdx += 1; }
    buff[inputIdx] = '\0';
    if (!strcmp("time", buff)) {

        timeConsumed = 1;
        while (timeConsumed == 1) {}
        pthread_mutex_lock(&lock);
        char timeFromFile[100];
        int fd = open("currentTime.txt", O_RDONLY);
        if (fd < 0) {
            perror("Error in open");
        }
        if (read(fd, timeFromFile, 100) < 0) {
            printf("Incorrect read\n");
            perror("Error in read");
        }
        pthread_mutex_unlock(&lock);
        printf("\n%s\n\n", timeFromFile);
        close(fd);
        printConnectionsDetails = 0;
    } else {
        int idx_dst = getRoomIdx(buff);
        end_room_found = idx_dst == end_room_idx;

//**    ************************
        if(idx_dst == -1) {

          printf("HUH? I DONâ€™T UNDERSTAND THAT ROOM. TRY AGAIN.\n");

        } else
            current_room_idx = idx_dst;

     }

  }
  stopping = 1;
  timeConsumed = 1;

  printf("End room found!");
  printf("The path that you took to find the end room was: ");


}
